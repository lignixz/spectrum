:: bloks lang
::
:: a test grammar with indentation
:: based blocks

 
:: tokens

identifier: ([a-zA-Z0-9]+)[^a-zA-Z0-9]		:: single

literal: _					:: single

comment: ::.*$				:: single

assigment: :				:: combinator

if: ? 						:: combinator

else: /						:: combinator (after if expr)

loop: <>					:: pair left operator

function: !					:: left side operator

object: @					:: left side operator

method: @!					:: left side operator

dot: .						:: combinator

getter: @!/					:: left side operator

setter: @!#					:: left side operator

private: *					:: left side operator

this1: *					:: single

this2: ~					:: single

parents: ( )				:: grouping



:: expressions

:: single

E

:: left side operator

oE

:: right side operator

Eo

:: combinator operator

EoE

:: pair left operator

oEE

:: pair left operator

oEE

:: grouping

oEp





:: line continuation ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: string

"abc
def"

:: math and boolean operators

x+y
+z

a + b +
c

a & b
*c

:: assigment

a:
4



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;
:: block consumers

:: these operators may consume sub blocks

:: if ?

?

:: else

/

:: loop

<> exp1 block

:: function

!

:: object

@

:: method

@!

:: getter

@!/

:: setter

@!#





:: test ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;::::


a: talk! 5 + ( a=2? 'b' / call! 'help' + and! ( go! 'home' + 1 ).yeah!'hoho' ) + 'help'

:: identifiers

a  talk  5     a    'b'   call  'help'   and    go  'home'   1   yeah  'hoho'    'help'

:: grouping

             (                                 (               )              )





:: parsing

tokenoze
bind bloks
bind groups






top: \+

:: indentation whitespace

_in: ^(\w)+\W+

:: separation whitespace

_: [^w](w)+[^w]
